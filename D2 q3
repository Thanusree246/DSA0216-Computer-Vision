import cv2
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Load the image
image = cv2.imread(r'C:\Users\HP\Pictures\Screenshot (30).png')
if image is None:
    raise ValueError("Image not found or unable to load!")

# Step 2: Convert to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Step 3: Define the Roberts cross operator kernels
roberts_cross_v = np.array([[1, 0], [0, -1]], dtype=np.float32)
roberts_cross_h = np.array([[0, 1], [-1, 0]], dtype=np.float32)

# Step 4: Apply the kernels to the grayscale image
vertical = cv2.filter2D(gray_image, -1, roberts_cross_v)
horizontal = cv2.filter2D(gray_image, -1, roberts_cross_h)

# Step 5: Compute the gradient magnitude
edges = np.sqrt(np.square(horizontal) + np.square(vertical))
edges = np.uint8(edges)

# Step 6: Display the results
plt.figure(figsize=(10, 5))

# Original image
plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')

# Grayscale image
plt.subplot(1, 3, 2)
plt.imshow(gray_image, cmap='gray')
plt.title('Grayscale Image')
plt.axis('off')

# Roberts edge-detected image
plt.subplot(1, 3, 3)
plt.imshow(edges, cmap='gray')
plt.title('Roberts Edge Detection')
plt.axis('off')

plt.tight_layout()
plt.show()
